{"version":3,"sources":["utils/API.js","components/SearchResults.js","components/SearchForm.js","components/SearchContainer.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","SearchResults","props","className","employees","map","employee","key","alt","src","picture","medium","name","first","last","phone","email","SearchForm","htmlFor","onChange","handleInputChange","value","search","list","type","placeholder","id","onClick","handleFormSubmit","SearchContainer","event","newList","target","state","filter","lc","toLowerCase","includes","setState","filtered","preventDefault","searchForm","onSort","sortType","e","results","error","API","then","res","data","catch","err","console","log","this","sorted","sort","a","b","localeCompare","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e1f698f3.chunk.js","sourcesContent":["// const BASEURL = \"https://jsonplaceholder.typicode.com/users?_limit\";\nimport axios from \"axios\";\n// import React, {Component} from \"react\";\n\n\nexport default {\n  searchEmployees: function() {\n    return axios.get(\"https://randomuser.me/api/?pretty?page=3&results=10&seed=abc\")\n  },\n  searchForm: function() {\n    return axios.get(\"https://randomuser.me/api/?pretty?page=3&results=10&seed=abc\")\n  },\n  getEmployeeByName: function() {\n    return axios.get(\"https://randomuser.me/api/?pretty?page=3&results=10&seed=abc\");\n  },\n  // Need to put in correct address to search by employee id\n  getEmployeeById: function() {\n    return axios.get(\"https://randomuser.me/api/?pretty?page=3&results=10&seed=abc\");\n  }\n\n};\n\n\n// export default {\n//   search: function(query) {\n//     return axios.get(BASEURL);\n//   }\n// };\n\n","// import API from \"../utils/API\";\nimport React from \"react\";\nimport \"./style.css\";\n\n\nfunction SearchResults(props) {\n  return(\n    // <ul className=\"list-group search-results\">\n    //   {props.employees.map(employee => (\n    //     <ul key={employee} className=\"list-group-item\">\n    //       <h3>Employee Information:</h3>\n    //       {/* <img alt=\"Employee\" src={result} className=\"img-fluid\" /> */}\n    //       <li>{employee.name.first} </li>\n    //       <li>{employee.name.last} </li>\n    //       <li>{employee.phone} </li>\n    //       <li>{employee.email} </li>\n    //       {/* <li>{employee.dob} </li> */}\n    //       {/* <img alt=\"employee-pict\">  {employee.picture} </img> */}\n    //     </ul>\n        \n    //   ))}\n    //   </ul>\n      \n              <div>\n                <table className=\"list-group search-results\">\n                <thead>\n                <tr>\n                    <th>Picture</th>\n                    <th>Name</th>\n                    <th>Phone</th>\n                    <th>Email</th>\n                </tr>\n                </thead>\n                    {props.employees.map(employee => (\n                      <tbody key={employee} className=\"list-group-item\">\n                        <tr>Employee Information:</tr>\n                        {/* <img alt=\"Employee\" src={result} className=\"img-fluid\" /> */}\n                        <td><img alt=\"employee-pic\" src={employee.picture.medium} className=\"img-fluid\" /></td>\n                        <td>{employee.name.first} </td>\n                        <td>{employee.name.last} </td>\n                        <td>{employee.phone} </td>\n                        <td>{employee.email} </td>\n                        {/* <li>{employee.dob} </li> */}\n                        {/* <img alt=\"employee-pict\">  {employee.picture} </img> */}\n                      </tbody>\n                      \n                    ))}\n                </table>\n            </div>\n\n  );\n}\n\nexport default SearchResults;\n\n\n\n/* /* /* // import React, { useState, useEffect } from \"react\";\n\n// export const SearchResults = () => { */  \n//   const [search, setSearch] = useState();\n//   const [employees, setEmployees] = useState([]);\n//   const [results, setResults] = useState([]);\n//   const [error, setError] = useState();\n\n//   useEffect();\n\n//   const searchEmployees = () => {\n    \n// }\n\n// handleInputChange = event => {\n//     const name = event.target.name;\n//     const value = event.target.value;\n//     this.setState({\n//         [name]: value\n//     });\n// };\n\n//  handleFormSubmit = event => {\n//      event.preventDefault();\n//      this.searchEmployees(this.state.search);\n//  };\n//     return (\n//       <div>\n//         <Search\n//           search={search}\n//           // handleFormSubmit={this.handleFormSubmit}\n//           // handleInputChange={this.handleInputChange}\n//         />\n//         <SearchResults results={results} />\n//       </div>\n//     );\n  \n\n// };\n\n// function SearchResults(props) {\n//     return (\n//         <ul className=\"list-group search-results\">\n//             {props.results.map(result => (\n//                 <li key={result} className=\"list-group-item\">\n//                     <img alt={props.name} src={result} className=\"img-fluid\" />\n//                 </li>\n//             ))}\n//         </ul>\n//     );\n// }\n\n","import React from \"react\";\n// import {handleInputChange} from \"./SearchContainer\";\nimport \"./style.css\";\n\nfunction SearchForm(props) {\n    return (\n        <form className=\"search\">\n            <div className=\"form-group input\">\n                <label htmlFor=\"employee\">Employee Name: </label>\n                <input\n                onChange={props.handleInputChange}\n                value={props.search}\n                name=\"employee\"\n                list=\"employees\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Type in an employee name\"\n                id=\"search\"\n                />\n                <datalist id=\"employees\">\n                    {props.employees.map(employee => (\n                        <option value={employee} key={employee} />\n                    ))}\n                </datalist>\n                <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\n                    Search\n                </button>\n            </div>\n        </form>\n    )\n}\n\nexport default SearchForm;","import React, { Component } from \"react\";\n// import Title from \"./Title\";\nimport API from \"../utils/API\";\n// import EmployeeFile from \"./EmployeeFile\";\n// import SearchForm from \"./SearchForm\";\nimport SearchResults from \"./SearchResults\";\nimport SearchForm from \"./SearchForm\";\n// import SortBtn from \"./SortBtn\";\n\n\nclass SearchContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            search: \"\",\n            results: [],\n            employees: [],\n            sortType: \"asc\",\n            filtered: [],\n            error: null\n        };\n\n    }\n    \n    componentDidMount() {\n        API.searchForm()\n        .then(res => this.setState({ employees: res.data.results, filtered: res.data.results }))\n        .catch(err => console.log(err));\n    }\n\n    handleInputChange = event => {\n        let currentList = [];\n        let newList = [];\n\n        if (event.target.value !== \"\"){\n            currentList = this.state.employees;\n\n            newList = currentList.filter(employee => {\n                const lc = employee.name.first.toLowerCase();\n                const filter = event.target.value.toLowerCase();\n                return lc.includes(filter);\n            });\n        } else {\n            newList = this.state.employees;\n        } \n            this.setState({\n                filtered: newList\n            });\n        // event.preventDefault();\n        // const searchName = event.target.value;\n        // // const name = event.target.name;\n        // // this.setState({\n        // //     [name]: value\n        // // });\n        // const filteredEmployees = this.state.employees.filter( employee => {\n        //     return employee.name.toLowerCase().indexOf(searchName.toLowerCase() ) !== -1;\n        // })\n        // if (!searchName) {\n        //     this.setState({searchName, message: ''});\n        // } else {\n        //     this.setState({ results: filteredEmployees });\n        // }\n\n\n        //this code searches employee by name \n        // const {search} = this.state;\n\n    }\n\n    handleFormSubmit = event => {\n        event.preventDefault();\n        this.searchForm(this.state.search);\n    }\n\n    onSort = sortType =>{\n        this.setState({sortType})\n    }\n\n    onChange = e =>{\n        this.setState({ search : e.target.value });\n    }\n\n    render() {\n\n\n        // if( search !== \"\" && employees.name.first.toLowerCase().indexOf( search.toLowerCase ) === -1) {\n        //     return null\n        // }\n\n        // this code sorts the employee list in desc and asc order\n        const {employees, sortType } = this.state;\n        const sorted = employees.sort((a, b) => {\n            const isReversed = (sortType === 'asc') ? 1 : -1;\n            return isReversed * a.name.first.localeCompare(b.name.first)\n        });\n\n        console.log(this.state.employees);\n        // employees = (this.state.employees);\n        return(\n            <div className=\"employeefile\">\n                <h1>Employee Directory</h1>\n            \n            <SearchForm\n                employees={this.state.employees}\n                handleInputChange={this.handleInputChange}\n                handleFormSubmit={this.handleFormSubmit}\n            />\n            <SearchResults \n            employees={this.state.filtered} \n            />\n            {/* <EmployeeFile\n                employees={this.state.employees}\n            /> */}\n\n            {/* <SortBtn> */}\n                <button type=\"submit\" onClick={() => this.onSort('asc')} \n                employee={employees} \n                onSort={this.onSort} \n                sortType={sorted} \n                className=\"btn btn-success\">\n                    Sort by ASC Order\n                </button>\n                <button type=\"submit\" onClick={() => this.onSort('desc')} className=\"btn btn-success\">\n                    Sort by DESC Order\n                </button>\n            {/* </SortBtn> */}\n            </div>\n        );\n    }\n}\n\nexport default SearchContainer;","// import React, { useState, useEffect } from 'react';\nimport React from \"react\";\nimport './App.css';\nimport SearchContainer from \"./components/SearchContainer\";\n\n// import SearchForm from \"./components/Search/SearchForm\";\n// import {SearchResults} from \"./components/Search/SearchResults\";\n// import axios from \"axios\";\n\nfunction App() {\n  return <SearchContainer/>\n  // return (\n  //   <div>\n  //     {/* <Title></Title> */}\n  //     <SearchContainer>\n\n  //     </SearchContainer>\n  // </div>\n  // )\n}\n\nexport default App;\n\n\n//STARTS COMPONENT FUNCTIONS ATTEMPT\n// let employees = [];\n\n// const App = () => {\n//   const [employees, setEmployees] = useState([])\n//   useEffect(() =>{\n//     getData();\n//   })\n//   const getData = () => {\n//     axios.get(\"https://jsonplaceholder.typicode.com/users?_limit\")\n//     .then(res => setEmployees(res.data))\n//     .catch(error => console.log(error))\n    \n//   }\n\n\n//   render() \n//     return ( \n//       <div>\n//         App\n//         </div>\n//       <Wrapper>\n//         <Title>Employee Directory</Title>\n//         {this.state.employees.map(employee => (\n//           <Employee\n//           // removeEmployee={this.removeEmployee}\n//           id={employee.id}\n//           key={employee.id}\n//           name={employee.name}\n//           email={employee.email}\n//           phone={employee.phone}\n//           />\n//         ))}\n//       </Wrapper>\n//     )\n    \n\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n  // const removeEmployee = id => {\n  //   const employees = this.state.friends.filter(friend => friend.id !== id);\n\n  //   this.setState({ employees });\n  // };\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}